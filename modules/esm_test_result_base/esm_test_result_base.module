<?php

/**
 * @file
 * Provides a result entity type.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function esm_test_result_base_theme() {
  return [
    'result' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for result templates.
 *
 * Default template: result.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the result information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_result(array &$variables) {

  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $result = $variables['elements']['#result'];
  $variables['attributes']['class'][] = "result";
  $variables['attributes']['class'][] = "result--type-" . Html::cleanCssIdentifier($result->bundle());
  $variables['attributes']['class'][] = "result--view-mode-" . Html::cleanCssIdentifier($variables['elements']['#view_mode']);

  $variables['status_badge'] = $result->getStatusBadge()->renderArray();
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views template suggestions.
 *
 * @inheritdoc
 */
function esm_test_result_base_theme_suggestions_result_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . "__" . $variables['elements']['#result']->bundle();
  $suggestions[] = $variables['theme_hook_original'] . "__" . $variables['elements']['#view_mode'];
  $suggestions[] = $variables['theme_hook_original'] . "__" . $variables['elements']['#result']->bundle() . "__" . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function esm_test_result_base_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');

  if ($view['view']->id() == "test_results" && $view['display']['id'] == "page_1") {
    $database = \Drupal::database();
    $query = $database->select('site_field_data', 's');
    $query->fields('s', ['id', 'title']);

    $results = $query->execute();

    $form['site']['#options'][''] = "- Any -";
    foreach ($results->fetchAll() as $site) {
      $form['site']['#options'][$site->id] = $site->title;
    }

    $form['site']['#type'] = "select";
    $form['site']['#size'] = 1;
    $form['site']['#multivalue'] = FALSE;

    // Test.
    $query = $database->select('test_field_data', 't');
    $query->fields('t', ['id', 'title']);

    $results = $query->execute();

    $form['test']['#options'][''] = "- Any -";
    foreach ($results->fetchAll() as $site) {
      $form['test']['#options'][$site->id] = $site->title;
    }

    $form['test']['#type'] = "select";
    $form['test']['#size'] = 1;
    $form['test']['#multivalue'] = FALSE;
  }
}
